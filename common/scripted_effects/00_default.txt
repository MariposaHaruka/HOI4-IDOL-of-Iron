#	Example:
#
#	example_effect = {
#		add_political_power = 66
#		add_popularity = {
#			ideology = fascism
#			popularity = 0.33
#		}
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

#####################################
### emergency_factory_conversion ####
#####################################

#This is going to give misleading and ugly tooltips. Making it nice will take effort. TODO_WTT_CD make nice or ignore and remove comment. Easiest solution is just making a custom tooltip that says "5 civilian factories will be converted to military factories" and ignore telling the player the states where it will happen.

#####################################
### emergency_factory_conversion ####
#####################################

#This is going to give misleading and ugly tooltips. Making it nice will take effort. TODO_WTT_CD make nice or ignore and remove comment. Easiest solution is just making a custom tooltip that says "5 civilian factories will be converted to military factories" and ignore telling the player the states where it will happen.

replace_civ_with_arms_factories = {

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}
}

#Country scope
ROOT_inherit_current_scope_wars_effect = {
	custom_effect_tooltip = ROOT_inherit_current_scope_wars_effect
	hidden_effect = {
		every_country = {
			limit = {
				has_defensive_war_with = PREV
			}
			ROOT = { declare_war_on = { target = PREV type = annex_everything } }
		}
		every_country = {
			limit = {
				has_offensive_war_with = PREV
			}
			declare_war_on = { target = ROOT type = annex_everything }
		}
	}
}

print_variable_log_effect = {
	print_variables = {
		file = variables_yug
		append = yes
	}
}

get_best_alliance_match_democratic_effect = { #arguably a trigger, but it does stuff so we keep it in here. If this is your first time seeing this, welcome to my personal hell.
	if = {
		limit = {
			any_other_country = {
				is_faction_leader = yes
				is_major = yes
				is_democratic = yes 
				not = { has_war_with = ROOT }
				set_temp_variable = { ROOT.best_leader = this }
				set_temp_variable = { ROOT.best_leader_score = 0 }
			}
		}
	}
	if = {
		limit = {
			all_other_country = {
				is_faction_leader = yes
				is_major = yes
				is_democratic = yes 
				not = { has_war_with = ROOT }
				set_temp_variable = { this.leader_score = num_of_factories }
				add_to_temp_variable = { this.leader_score = num_battalions }
				all_of_scopes = {
					array = allies
					add_to_temp_variable = { PREV.leader_score = num_of_factories }
					add_to_temp_variable = { PREV.leader_score = num_battalions }
				}
				if = {
					limit = {
						capital_scope = {
							is_on_continent = ROOT
						}
					}
					multiply_temp_variable = { leader_score = 2 }
				}
				if = {
					limit = {
						any_neighbor_country = { tag = ROOT }
					}
					multiply_temp_variable = { leader_score = 1.25 }
				}
				if = {
					limit = {
						check_variable = { ROOT.best_leader_score < leader_score }
						set_temp_variable = { ROOT.best_leader = this }
						set_temp_variable = { ROOT.best_leader_score = leader_score }
					}
				}
			}
		}
	}
}

get_best_alliance_match_fascism_effect = { #arguably a trigger, but it does stuff so we keep it in here. If this is your first time seeing this, welcome to my personal hell.
	if = {
		limit = {
			any_other_country = {
				is_faction_leader = yes
				is_major = yes
				is_fascism = yes 
				not = { has_war_with = ROOT }
				set_temp_variable = { ROOT.best_leader = this }
				set_temp_variable = { ROOT.best_leader_score = 0 }
			}
		}
	}
	if = {
		limit = {
			all_other_country = {

				is_faction_leader = yes
				is_major = yes
				is_fascism = yes 
				not = { has_war_with = ROOT }

				set_temp_variable = { this.leader_score = num_of_factories }
				add_to_temp_variable = { this.leader_score = num_battalions }
				all_of_scopes = {
					array = allies
					add_to_temp_variable = { PREV.leader_score = num_of_factories }
					add_to_temp_variable = { PREV.leader_score = num_battalions }
				}
				if = {
					limit = {
						capital_scope = {
							is_on_continent = ROOT
						}
					}
					multiply_temp_variable = { this.leader_score = 2 }
				}
				if = {
					limit = {
						any_neighbor_country = { tag = ROOT }
					}
					multiply_temp_variable = { this.leader_score = 1.25 }
				}
				if = {
					limit = {
						check_variable = { ROOT.best_leader_score < this.leader_score }
					}
					set_temp_variable = { ROOT.best_leader = this }
					set_temp_variable = { ROOT.best_leader_score = this.leader_score }
				}
			}
		}
	}
}

get_best_alliance_match_communism_effect = { #arguably a trigger, but it does stuff so we keep it in here. If this is your first time seeing this, welcome to my personal hell.
	if = {
		limit = {
			any_other_country = {
				is_faction_leader = yes
				is_major = yes
				is_communism = yes 
				not = { has_war_with = ROOT }
				set_temp_variable = { ROOT.best_leader = this }
				set_temp_variable = { ROOT.best_leader_score = 0 }
			}
		}
	}
	if = {
		limit = {
			all_other_country = {
				is_faction_leader = yes
				is_major = yes
				is_communism = yes 
				not = { has_war_with = ROOT }
				set_temp_variable = { this.leader_score = num_of_factories }
				add_to_temp_variable = { this.leader_score = num_battalions }
				all_of_scopes = {
					array = allies
					add_to_temp_variable = { PREV.leader_score = num_of_factories }
					add_to_temp_variable = { PREV.leader_score = num_battalions }
				}
				if = {
					limit = {
						capital_scope = {
							is_on_continent = ROOT
						}
					}
					multiply_temp_variable = { leader_score = 2 }
				}
				if = {
					limit = {
						any_neighbor_country = { tag = ROOT }
					}
					multiply_temp_variable = { leader_score = 1.25 }
				}
				if = {
					limit = {
						check_variable = { ROOT.best_leader_score < leader_score }
						set_temp_variable = { ROOT.best_leader = this }
						set_temp_variable = { ROOT.best_leader_score = leader_score }
					}
				}
			}
		}
	}
}

civil_war_anti_exploiter_punitive_action = {
	# Anti-exploiter punitive brigades! BET YA DIDN'T SEE THAT COMING DID YA?!
	if = {
		limit = {
			has_army_size = {
			    size < 1
			}
		}
		random_state = {
			limit = {
				is_capital = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
	}
}

clear_sabotaged_resources_if_necesary = {
	if = {
		limit = {
			not = {
				has_dynamic_modifier = {
					modifier = sabotaged_resources
				}
			}
		}

		clear_variable = sabotaged_oil
		clear_variable = sabotaged_aluminium
		clear_variable = sabotaged_rubber
		clear_variable = sabotaged_tungsten
		clear_variable = sabotaged_steel
		clear_variable = sabotaged_chromium
	}
}

remove_from_allowed_party = {
	if = {
		limit = { is_democratic = yes }
		set_temp_variable = { allowed_party_democratic = 0 }
	}
	else_if = {
		limit = { is_fascism = yes }
		set_temp_variable = { allowed_party_fascism = 0 }
	}
	else_if = {
		limit = { is_communism = yes }
		set_temp_variable = { allowed_party_communism = 0 }
	}
	else_if = {
		limit = { is_neutrality = yes }
		set_temp_variable = { allowed_party_neutrality = 0 }
	}
}

#expectes a temp variable country_to_initiate which should contain original_tag to instantiate as a collabration government
instantiate_collaboration_government = {
	custom_effect_tooltip = compliance_80_effect_tooltip
	hidden_effect = {
		set_variable = { collaboration_formed@var:country_to_initiate = 1 }

		if = {
			# if country_to_initiate does not exist, simply release it as a puppet
			limit = {
				var:country_to_initiate = {
					exists = no
				}
			}
			var:country_to_initiate = { set_variable = { collaboration_formed_by = PREV } }
			release_autonomy = {
				target = country_to_initiate
				autonomy_state = autonomy_collaboration_government
				freedom_level = 0.5
				release_non_owned_controlled = yes
			}
		}
		else = {
			# if country_to_initiate exists, create a dynamic country as our new puppet

			create_dynamic_country = {
				original_tag = country_to_initiate

				set_variable = { collaboration_formed_by = PREV }
				set_temp_variable = { new_country = this }
				PREV = {
					every_controlled_state = {
						limit = { occupied_country_tag = country_to_initiate }

						var:new_country = {
							transfer_state = PREV
						}
					}

					puppet = new_country

					set_autonomy = {
						target = new_country
						autonomy_state = autonomy_collaboration_government
						freedom_level = 0.5
					}
				}
			}
		}
	}
}


abandon_colony_tag = {
	if = {
		limit = {
			is_subject = yes
		}
		if = {
			limit = { original_tag = IML }
			set_cosmetic_tag = IML_IMA
		}
		else_if = {
			limit = { original_tag = ICG }
			set_cosmetic_tag = ICG_IMA
		}
		else_if = {
			limit = { original_tag = ISC }
			set_cosmetic_tag = ISC_IMA
		}
		else_if = {
			limit = { original_tag = ISM }
			set_cosmetic_tag = ISM_IMA
		}
		else_if = {
			limit = { original_tag = IDS }
			set_cosmetic_tag = IDS_IMA
		}
		else_if = {
			limit = { original_tag = IGM }
			set_cosmetic_tag = IGM_IMA
		}
		else_if = {
			limit = { original_tag = LSS }
			set_cosmetic_tag = LSS_LLS
		}
		else_if = {
			limit = { original_tag = LNH }
			set_cosmetic_tag = LNH_LLS
		}
		else_if = {
			limit = { original_tag = LST }
			set_cosmetic_tag = LST_LLS
		}
		else_if = {
			limit = { original_tag = LHH }
			set_cosmetic_tag = LHH_LLS
		}
	}
	else = {
		if = { limit = { has_cosmetic_tag = united_polynesia } }
		else = { drop_cosmetic_tag = yes }
	}
}

upgrade_economy_law = {
	if = {
		limit = {
			has_idea = civilian_economy
		}
		add_ideas = low_economic_mobilisation
	}
	else_if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		add_ideas = partial_economic_mobilisation
	}
	else_if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		add_ideas = war_economy
	}
	else_if = {
		limit = {
			has_idea = war_economy
		}
		add_ideas = tot_economic_mobilisation
	}
	else = {
		add_political_power = 150
	}
}

gain_random_agency_upgrade = { #Gives a random agency upgrade or grants a free agency if one has not yet been established
	custom_effect_tooltip = free_agency_upgrade_tt
	hidden_effect = {
		if = {
			limit = {
				has_intelligence_agency = no
			}
			create_intelligence_agency = yes
		}
		else = {
			random_list = {
				1 = {
					upgrade_intelligence_agency = upgrade_economy_civilian
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_economy_civilian
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_army_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_army_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_naval_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_naval_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_airforce_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_airforce_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_passive_defense
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_passive_defense
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_anti_partisan
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_anti_partisan
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_blueprint_stealing
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_blueprint_stealing
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_portable_radios
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_portable_radios
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_invisible_ink
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_invisible_ink
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_plastic_explosives
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_plastic_explosives
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_suicide_pills
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_suicide_pills
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_training_centers
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_training_centers
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_commando_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_commando_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_interrogation_techniques
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_interrogation_techniques
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_diplo_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_diplo_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_psycho_warfare
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_psycho_warfare
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_form_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_form_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_decryption_boost }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_crypto_strength }
						}
					}
				}
			}
		}
	}
}

#Should remove any and all fascist foreign influence, to be updated
remove_fascist_spirits_effect = {
	if = {
		limit = { has_idea = fascist_influence }
		remove_ideas = fascist_influence
	}
}

#Should remove any and all communist foreign influence
remove_communist_spirits_effect = {
}

#Should remove any and all democratic foreign influence
remove_democratic_spirits_effect = {
	if = {
		limit = { has_idea = democratic_influence }
		remove_ideas = democratic_influence
	}
}

on_daily = {

}

#on_daily_USA = {
#	# you can specify an on daily action for a specific country
#}

###Game weight variables for faction load balancing.
###We store these on germany because ... we have to

leave_the_league_of_nations = {
	custom_effect_tooltip = leave_the_league_of_nations_tt
	hidden_effect = { remove_ideas = league_of_nations_member_idea }
}

bba_create_cas_license_effect = { #this assumes that the corresponding get_cas_effect has run already to generate a design template if necessary
	if = {
		limit = {
			has_tech = advanced_small_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = small_plane_cas_airframe_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_small_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = small_plane_cas_airframe_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = basic_small_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = small_plane_cas_airframe_1
			}
			cost_factor = 0
		}
	}
}

bba_create_fighter_license_effect = { #this assumes that the corresponding get_fighter_effect has run already to generate a design template if necessary
	if = {
		limit = {
			has_tech = advanced_small_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = small_plane_airframe_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_small_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = small_plane_airframe_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = basic_small_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = small_plane_airframe_1
			}
			cost_factor = 0
		}
	}
}

bba_create_tac_license_effect = { #this assumes that the corresponding get_tac_effect has run already to generate a design template if necessary
	if = {
		limit = {
			has_tech = advanced_medium_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = medium_plane_airframe_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_medium_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = medium_plane_airframe_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = basic_medium_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = medium_plane_airframe_1
			}
			cost_factor = 0
		}
	}
}

bba_create_heavy_fighter_license_effect = { #this assumes that the corresponding get_fighter_effect has run already to generate a design template if necessary
	if = {
		limit = {
			has_tech = advanced_medium_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = medium_plane_fighter_airframe_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_medium_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = medium_plane_fighter_airframe_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = basic_medium_airframe
		}
		create_production_license = {
			target = event_target:license_target
			equipment = {
				type = medium_plane_fighter_airframe_1
			}
			cost_factor = 0
		}
	}
}

remove_any_country_role_from_character = { #Expected to be used inside the character scope
	#log = "I am [THIS.GetName]"
	if = {
		limit = {
			is_character_slot = air_chief
		}
		remove_advisor_role = { slot = air_chief }
	}
	if = {
		limit = {
			is_character_slot = army_chief
		}
		remove_advisor_role = { slot = army_chief }
	}
	if = {
		limit = {
			is_character_slot = navy_chief
		}
		remove_advisor_role = { slot = navy_chief }
	}
	if = {
		limit = {
			is_character_slot = high_command
		}
		remove_advisor_role = { slot = high_command }
	}
	if = {
		limit = {
			is_character_slot = theorist
		}
		remove_advisor_role = { slot = theorist }
	}
	if = {
		limit = {
			is_character_slot = political_advisor
		}
		remove_advisor_role = { slot = political_advisor }
	}
}

add_potential_special_forces_tree = {
	custom_effect_tooltip = add_potential_special_forces_tree_tt
	if = {
		limit = { NOT = { has_variable = sf_trees } }
		set_variable = { sf_trees = 2 }
	}
	else = {
		add_to_variable = { sf_trees = 1 }
	}
}

remove_potential_special_forces_tree = {
	if = {
		limit = { NOT = { has_variable = sf_trees } }
		set_variable = { sf_trees = 0 }
	}
	else = {
		subtract_from_variable = { sf_trees = 1 }
	}
}

embargo_ROOT = {
	if = {
		limit = {
			NOT = { has_country_flag = embargoed_@ROOT }
		}
		set_country_flag = embargoed_@ROOT
		ROOT = { set_country_flag = embargoed_@PREV }
		if = {
			limit = { has_BBA = yes }
			if = {
				limit = { NOT = { is_embargoing = ROOT } }
				send_embargo = ROOT
			}
			if = {
				limit = { NOT = { is_embargoed_by = ROOT } }
				ROOT = { send_embargo = PREV }
			}
		}
		else = {
			add_opinion_modifier = {
				modifier = embargoed_us
				target = ROOT
			}
			reverse_add_opinion_modifier = {
				modifier = embargoed_us
				target = ROOT
			}
		}
	}
}

clear_embargo_ROOT = {
	if = {
		limit = { has_country_flag = embargoed_@ROOT }
		clr_country_flag = embargoed_@ROOT
		effect_tooltip = {
			if = {
				limit = { has_BBA = yes }
				diplomatic_relation = {
					country = ROOT
					relation = embargo
					active = no
				}
			}
			else = {
				remove_opinion_modifier = {
					modifier = embargoed_us
					target = ROOT
				}
			}
		}
		hidden_effect = {
			diplomatic_relation = {
				country = ROOT
				relation = embargo
				active = no
			}
			remove_opinion_modifier = {
				modifier = embargoed_us
				target = ROOT
			}
		}
		ROOT = {
			clr_country_flag = embargoed_@PREV
			effect_tooltip = {
				if = {
					limit = { has_BBA = yes }
					diplomatic_relation = {
						country = PREV
						relation = embargo
						active = no
					}
				}
				else = {
					remove_opinion_modifier = {
						modifier = embargoed_us
						target = PREV
					}
				}
			}
			hidden_effect = {
				diplomatic_relation = {
					country = PREV
					relation = embargo
					active = no
				}
				remove_opinion_modifier = {
					modifier = embargoed_us
					target = PREV
				}
			}
		}
	}
}

embargo_PREV = {
	if = {
		limit = { NOT = { has_country_flag = embargoed_@PREV } }
		set_country_flag = embargoed_@PREV
		PREV = { set_country_flag = embargoed_@PREV }
		if = {
			limit = { has_BBA = yes }
			if = {
				limit = { NOT = { is_embargoing = PREV } }
				diplomatic_relation = {
					country = PREV
					relation = embargo
				}
			}
			if = {
				limit = { NOT = { is_embargoed_by = PREV } }
				PREV = {
					diplomatic_relation = {
						country = PREV
						relation = embargo
					}
				}
			}
		}
		else = {
			add_opinion_modifier = {
				modifier = embargoed_us
				target = PREV
			}
			reverse_add_opinion_modifier = {
				modifier = embargoed_us
				target = PREV
			}
		}
	}
}

clear_embargo_PREV = {
	if = {
		limit = { has_country_flag = embargoed_@PREV }
		clr_country_flag = embargoed_@PREV
		effect_tooltip = {
			if = {
				limit = { has_BBA = yes }
				diplomatic_relation = {
					country = PREV
					relation = embargo
					active = no
				}
			}
			else = {
				remove_opinion_modifier = {
					modifier = embargoed_us
					target = PREV
				}
			}
		}
		hidden_effect = {
			diplomatic_relation = {
				country = PREV
				relation = embargo
				active = no
			}
			remove_opinion_modifier = {
				modifier = embargoed_us
				target = PREV
			}
		}
		PREV = {
			clr_country_flag = embargoed_@PREV
			effect_tooltip = {
				if = {
					limit = { has_BBA = yes }
					diplomatic_relation = {
						country = PREV
						relation = embargo
						active = no
					}
				}
				else = {
					remove_opinion_modifier = {
						modifier = embargoed_us
						target = PREV
					}
				}
			}
			hidden_effect = {
				diplomatic_relation = {
					country = PREV
					relation = embargo
					active = no
				}
				remove_opinion_modifier = {
					modifier = embargoed_us
					target = PREV
				}
			}
		}
	}
}

embargo_FROM = {
	if = {
		limit = {
			NOT = { has_country_flag = embargoed_@FROM }
		}
		set_country_flag = embargoed_@FROM
		FROM = { set_country_flag = embargoed_@PREV }
		if = {
			limit = { has_BBA = yes }
			if = {
				limit = { NOT = { is_embargoing = FROM } }
				diplomatic_relation = {
					country = FROM
					relation = embargo
				}
			}
			if = {
				limit = { NOT = { is_embargoed_by = FROM } }
				FROM = {
					diplomatic_relation = {
						country = PREV
						relation = embargo
					}
				}
			}
		}
		else = {
			add_opinion_modifier = {
				modifier = embargoed_us
				target = FROM
			}
			reverse_add_opinion_modifier = {
				modifier = embargoed_us
				target = FROM
			}
		}
	}
}

clear_embargo_FROM = {
	if = {
		limit = { has_country_flag = embargoed_@FROM }
		clr_country_flag = embargoed_@FROM
		effect_tooltip = {
			if = {
				limit = { has_BBA = yes }
				diplomatic_relation = {
					country = FROM
					relation = embargo
					active = no
				}
			}
			else = {
				remove_opinion_modifier = {
					modifier = embargoed_us
					target = FROM
				}
			}
		}
		hidden_effect = {
			diplomatic_relation = {
				country = FROM
				relation = embargo
				active = no
			}
			remove_opinion_modifier = {
				modifier = embargoed_us
				target = FROM
			}
		}
		FROM = {
			clr_country_flag = embargoed_@PREV
			effect_tooltip = {
				if = {
					limit = { has_BBA = yes }
					diplomatic_relation = {
						country = PREV
						relation = embargo
						active = no
					}
				}
				else = {
					remove_opinion_modifier = {
						modifier = embargoed_us
						target = PREV
					}
				}
			}
			hidden_effect = {
				diplomatic_relation = {
					country = PREV
					relation = embargo
					active = no
				}
				remove_opinion_modifier = {
					modifier = embargoed_us
					target = PREV
				}
			}
		}
	}
}

ban_democratic_effect = {
	set_party_name = {
		ideology = conservatism
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}
	set_party_name = {
		ideology = liberalism_mod
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}
	set_party_name = {
		ideology = progressivism
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}
	set_party_name = {
		ideology = socialdemocracy
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}

	set_country_flag = banned_democratic_flag
	set_country_flag = banned_democratic_parties_flag
}

ban_communism_effect = {
	set_party_name = {
		ideology = communism
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}
	set_party_name = {
		ideology = authoritariancommunism
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}
	set_party_name = {
		ideology = socialism
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}
	set_party_name = {
		ideology = anarchosyndicalism
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}

	set_country_flag = banned_communism_flag
	set_country_flag = banned_communism_parties_flag
}

ban_fascism_effect = {
	set_party_name = {
		ideology = fascism
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}
	set_party_name = {
		ideology = militarytotalism
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}

	set_country_flag = banned_fascism_flag
	set_country_flag = banned_fascism_parties_flag
}

ban_autocracy_effect = {
	set_party_name = {
		ideology = autocracy
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}

	set_country_flag = banned_autocracy_flag
	set_country_flag = banned_autocracy_parties_flag
}

ban_authoritariandemocracy_effect = {
	set_party_name = {
		ideology = authoritariandemocracy
		long_name = BANNED_PARTY
		name = BANNED_PARTY_short
	}

	set_country_flag = banned_authoritariandemocracy_flag
	set_country_flag = banned_authoritariandemocracy_parties_flag
}

# use in a state scope
# has no effect for megalopoleis, enclaves, islands or wastelands
increase_state_category_by_one_level = {
	if = {
		limit = { has_state_category = wasteland }
		set_state_category = enclave
	}
	else_if = {
		limit = { has_state_category = enclave }
		set_state_category = pastoral
	}
	else_if = {
		limit = { has_state_category = pastoral }
		set_state_category = rural
	}
	else_if = {
		limit = { has_state_category = rural }
		set_state_category = town
	}
	else_if = {
		limit = { has_state_category = town }
		set_state_category = large_town
	}
	else_if = {
		limit = { has_state_category = large_town }
		set_state_category = city
	}
	else_if = {
		limit = { has_state_category = city }
		set_state_category = large_city
	}
	else_if = {
		limit = { has_state_category = large_city }
		set_state_category = metropolis
	}
	else_if = {
		limit = { has_state_category = metropolis }
		set_state_category = megalopolis
	}
	else_if = {
		limit = { has_state_category = megalopolis }
		add_extra_state_shared_building_slots = 4
	}
	else = {
		add_extra_state_shared_building_slots = 2
	}
}

increase_state_category_by_two_levels = {
	if = {
		limit = { has_state_category = wasteland }
		set_state_category = pastoral
	}
	else_if = {
		limit = { has_state_category = enclave }
		set_state_category = rural
	}
	else_if = {
		limit = { has_state_category = pastoral }
		set_state_category = town
	}
	else_if = {
		limit = { has_state_category = rural }
		set_state_category = large_town
	}
	else_if = {
		limit = { has_state_category = town }
		set_state_category = city
	}
	else_if = {
		limit = { has_state_category = large_town }
		set_state_category = large_city
	}
	else_if = {
		limit = { has_state_category = city }
		set_state_category = metropolis
	}
	else_if = {
		limit = { has_state_category = large_city }
		set_state_category = megalopolis
	}
	else_if = {
		limit = { has_state_category = metropolis }
		set_state_category = megalopolis
		add_extra_state_shared_building_slots = 2
	}
	else_if = {
		limit = { has_state_category = megalopolis }
		add_extra_state_shared_building_slots = 4
	}
	else = {
		add_extra_state_shared_building_slots = 2
	}
}

decrease_state_category_by_one_level = {
	if = {
		limit = { has_state_category = megalopolis }
		set_state_category = metropolis
	}
	else_if = {
		limit = { has_state_category = metropolis }
		set_state_category = large_city
	}
	else_if = {
		limit = { has_state_category = large_city }
		set_state_category = city
	}
	else_if = {
		limit = { has_state_category = city }
		set_state_category = large_town
	}
	else_if = {
		limit = { has_state_category = large_town }
		set_state_category = town
	}
	else_if = {
		limit = { has_state_category = town }
		set_state_category = rural
	}
	else_if = {
		limit = { has_state_category = enclave }
		set_state_category = pastoral
	}
	else_if = {
		limit = { has_state_category = pastoral }
		set_state_category = enclave
	}
	else_if = {
		limit = { has_state_category = enclave }
		set_state_category = wasteland
	}
	else = {
		add_extra_state_shared_building_slots = -1
	}
}
